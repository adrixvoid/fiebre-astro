---
import { getCollection, type CollectionEntry } from "astro:content";

import { Image } from "astro:assets";

import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
import Container from "~/components/ui/container/Container.astro";
import Section from "~/components/ui/section/Section.astro";
import Link from "~/components/ui/link/Link.astro";
import Article from "~/components/portfolio/Article.astro";
import Grid from "~/components/ui/grid/Grid.astro";
import Title from "~/components/ui/text/Title.astro";

import { PORTFOLIO_FILTERS, SITE_DESCRIPTION, SITE_TITLE } from "../../consts";

import localSVGStar from '../../../public/assets/star.svg';

import styles from "~/components/portfolio/PortfolioList.module.css";

const posts = await getCollection("portfolio", ({ data }: CollectionEntry<"portfolio">) => !data.draft);
const filtered:CollectionEntry<"portfolio">[] = posts.sort(
  (a: CollectionEntry<"portfolio">, b: CollectionEntry<"portfolio">) => a.data.pubDate && b.data.pubDate ? b.data.pubDate.valueOf() - a.data.pubDate.valueOf() : 0
)
---

<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main>
      <Section marginBottom>
        <Container variant="fluid">
          <nav id="filter" class={styles.filter}>
            {
              PORTFOLIO_FILTERS.map((link) => {
                return (
                    <span><Image src={localSVGStar} aria-hidden="true" alt="estrella" /></span>
                    <Title
                      class={{
                        active: link.active,
                      }}
                      variant="primary"
                      as={Link}
                      href={`#${link.category}`}
                      data-filter-by={link.category}
                      style={{ fontSize: "6cqw" }}
                    >
                      {link.label}
                    </Title>
                );
              })
            }
          </nav>
          <Grid class={styles.grid}>
            {
              filtered.map((post) => (
                <Article class={styles.article} {...post} />
              ))
            }
          </Grid>
        </Container>
      </Section>

      <Footer />
    </main>
  </body>
</html>
<script>
  const filter = document.getElementById("filter");
  const links = filter?.querySelectorAll("a");
  const posts = document?.querySelectorAll("article");

  function activate(link: HTMLAnchorElement) {
    const activeElement = filter?.querySelector(".active");
    activeElement?.classList.remove("active");
    link?.classList.add("active");
  }

  function hideElement(element: HTMLElement) {
    element.setAttribute("style", 'display: none');
  }

  function showElement(element: HTMLElement) {
    element.removeAttribute("style");
  }

  function filterBy(categorySelected?: string) {
    if (categorySelected === "all") {
      posts?.forEach((post) => {
        showElement(post);
      });
      return;
    }

    posts?.forEach((post) => {
      const categoriesOfPost = post.dataset.categories?.split(",");
      categoriesOfPost?.map((currentCategory) => {
        if (categorySelected === currentCategory) {
          showElement(post);
        } else {
          hideElement(post);
        }
      });
    });
  }

  links?.forEach((link) => {
    link.addEventListener("click", () => activate(link));
  });

  window.addEventListener('popstate', function () {
  filterBy(window.location.hash.replace('#', ''));
});
</script>

<!-- <script>
  const posts = document?.querySelectorAll("article");
  const body = document?.querySelector("body");

  posts?.forEach((post) => {
    post?.addEventListener("mouseover", () => setColor(post));
    post?.addEventListener("mouseout", () => removeColor());
  });

  function setColor(element: HTMLElement) {
    body?.setAttribute("style", `
    background-color: ${element.dataset.background};
    color: ${element.dataset.color};`);
  }

  function removeColor() {
    body?.removeAttribute("style");
  }
</script> -->

<style>
  body {
    transition-property: background-color, color;
    transition-duration:  250ms;
    transition-timing-function: ease-in-out;
  }
  .active {
    color: hsl(var(--color-brand3));
    scale: 1.2;
  }
</style>

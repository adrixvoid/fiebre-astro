---
import type { HTMLAttributes } from "astro/types";
import Button from "../ui/button/Button.astro";
import Drawer from "../ui/drawer/Drawer.astro";
import Icon from "../ui/icon/Icon.astro";
import type { iconPaths } from "../ui/icon/IconPaths";
import Link from "../ui/link/Link.astro";
import Nav from "../ui/nav/Nav.astro";
import NavLink from "../ui/nav/NavLink.astro";
import Logo from "../ui/svg/Logo.astro";
import styles from "./MobileMenu.module.css";

type Props = HTMLAttributes<"div"> & {
  textLinks: { label: string; href: string }[];
  iconLinks: { label?: string; href: string; icon: keyof typeof iconPaths }[];
};

const {
  class: className = "",
  textLinks,
  iconLinks,
  style = {},
  ...props
} = Astro.props as Props;

const inlineStyle = typeof style === "object" ? style : null;
---

<Drawer id="mobile-menu">
  <Button
    slot="button"
    variant="ghost"
    class:list={[styles.button, "menu-button"]}
  >
    <Icon icon="hamburger" size="24px" />
    <span class="sr-only">Menu</span>
  </Button>
  <div id="menu-content">
    <div class={styles.menu} style={{ ...inlineStyle }} {...props}>
      <header class:list={[styles.header, styles.padding]}>
        <Link
          slot="mobile-menu-head"
          href="/"
          class={styles.logoLink}
          title="Go to home page"
        >
          <Logo />
        </Link>
        <Button
          data-action="close-drawer"
          class:list={styles.close}
          variant="ghost"
        >
          <Icon icon="x" size="24px" />
          <span class="sr-only">Close Menu</span>
        </Button>
      </header>
      <div class={styles.content}>
        <Nav class={styles.nav}>
          {
            textLinks.map(({ label, href }) => (
              <NavLink
                aria-current={Astro.url.pathname === href}
                class:list={[
                  "link",
                  {
                    active:
                      Astro.url.pathname === href ||
                      (href !== "/" && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </NavLink>
            ))
          }
        </Nav>
      </div>
      <div class={styles.footer}>
        <div class={styles.padding}>
          <div class={styles.socials}>
            {
              iconLinks.map(({ href, icon, label }) => (
                <Link href={href} class="social">
                  <Icon icon={icon} size="1.5rem" />
                  {label}
                </Link>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</Drawer>

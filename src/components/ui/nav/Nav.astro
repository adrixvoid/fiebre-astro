---
import styles from "./Nav.module.css";

const { class: className = "", ...props } = Astro.props;
---

<check-link-active data-active-classname={styles.active}>
  <nav {...props} class:list={[styles.nav, className]}>
    <slot />
  </nav>
</check-link-active>

<script>
  class CheckLinkActive extends HTMLElement {
    links;
    activeClassName: string;
    constructor() {
      super();
      this.activeClassName = this.dataset.activeClassname || "";
      this.links = this.querySelectorAll("a");

      // The following is not necessary since scroll is listening form changes
      // this.links.forEach((element) => {
      //   element.addEventListener("click", () => this.checkLinksActive(element));
      // });
      document.addEventListener("scroll", this.startSrollEvent);
    }

    checkLinksActive(element: HTMLAnchorElement) {
      if (element.href.includes("#")) {
        if (!element.classList.contains(this.activeClassName)) {
          this.activateLink(element);
        }
      }
    }

    startSrollEvent = () => {
      let sections = document.querySelectorAll("section");
      sections.forEach((section) => {
        let top = window.scrollY;
        let offset = section.offsetTop - 200;
        let height = section.offsetHeight;
        let id = section.getAttribute("id");

        if (top >= offset && top < offset + height) {
          this.activateLink(
            this.querySelector(`nav a[href*=${id}]`) as HTMLAnchorElement
          );
        }
      });
    };

    activateLink = (element: HTMLAnchorElement) => {
      const current = this.parentElement?.querySelector(
        "." + this.activeClassName
      );
      current?.classList.remove(this.activeClassName);
      if (element.hasAttribute("aria-current")) {
        element.removeAttribute("aria-current");
      }
      element.classList.add(this.activeClassName);
      element.setAttribute("aria-current", "page");
    };
  }

  customElements.define("check-link-active", CheckLinkActive);
</script>

---
import type { HTMLAttributes } from "astro/types";
import styles from "./Drawer.module.css";

type Props = HTMLAttributes<"dialog"> & {
  id: string;
};

const { id = "drawer", class: className = "", ...props } = Astro.props as Props;
---

<custom-drawer>
  <dialog id={id} class:list={[styles.dialog, className]} {...props}>
    <div class:list={["backdrop", styles.backdrop]}></div>
    <content>
      <div class={styles.content}>
        <slot />
      </div>
    </content>
  </dialog>
  <open-button>
    <slot name="button" />
  </open-button>
</custom-drawer>

<script>
  class TrapFocus {
    baseElement;
    focusableElements: NodeListOf<HTMLElement | HTMLDivElement> | null = null;

    constructor(element?: HTMLElement) {
      this.baseElement = element || document.querySelector("body");
    }

    enable = () => {
      this.baseElement?.addEventListener("keydown", this.trapFocus);
      this.focusableElements = this.baseElement
        ? this.baseElement?.querySelectorAll(
            'a, button, input, textarea, select, details, [tabindex]:not([tabindex="-1"])'
          )
        : null;
    };

    disable = () => {
      this.baseElement?.removeEventListener("keydown", this.trapFocus);
    };

    trapFocus = (event: KeyboardEvent) => {
      const firstElement = this.focusableElements?.[0];
      const lastElement =
        this.focusableElements?.[this.focusableElements.length - 1];

      if (event.key === "Tab") {
        const tabForwards =
          !event.shiftKey && document?.activeElement === lastElement;
        const tabBackwards =
          event.shiftKey && document?.activeElement === firstElement;

        if (tabForwards) {
          // only TAB is pressed, not SHIFT simultaneously
          // Prevent default behavior of keydown on TAB (i.e. focus next element)
          event.preventDefault();
          (firstElement as HTMLElement).focus();
        } else if (tabBackwards) {
          // TAB and SHIFT are pressed simultaneously
          event.preventDefault();
          (lastElement as HTMLElement).focus();
        }
      }
    };
  }

  class CustomDrawer extends HTMLElement {
    dialogElement: HTMLDialogElement | null;
    openButtonElement: HTMLButtonElement | null;
    closeButtonElements?: NodeListOf<HTMLButtonElement> | null;
    backdropElement?: HTMLDivElement | null;
    trapFocus?: TrapFocus;

    constructor() {
      super();

      this.openButtonElement = this.querySelector("open-button > *");
      this.dialogElement = this.querySelector("dialog");
      this.openButtonElement?.addEventListener("click", this.openModal);
      this.setAccessibility(false);
    }

    openModal = () => {
      this.dialogElement?.showModal();
      this.disableScroll();

      this.setAccessibility(true);

      this.trapFocus = new TrapFocus(this.dialogElement as HTMLElement);
      this.trapFocus.enable();

      this.closeButtonElements = this.querySelectorAll(
        "button[data-action='close-drawer']"
      );
      this.closeButtonElements.forEach((element) => {
        element.addEventListener("click", this.closeModal);
      });

      this.backdropElement = this.querySelector(".backdrop");
      this.backdropElement?.addEventListener("click", this.closeModal);

      addEventListener("resize", this.closeModal);
    };

    closeModal = () => {
      this.setAccessibility(false);
      this.trapFocus?.disable();
      this.dialogElement?.close();

      this.enableScroll();
      this.closeButtonElements?.forEach((element) => {
        element.removeEventListener("click", this.closeModal);
      });
      this.backdropElement?.removeEventListener("click", this.closeModal);
      this.removeEventListener("resize", this.closeModal);
    };

    setAccessibility = (isActive: boolean = false) => {
      this.dialogElement?.setAttribute("aria-modal", JSON.stringify(isActive));
      this.openButtonElement?.setAttribute(
        "aria-expanded",
        JSON.stringify(isActive)
      );
    };

    disableScroll = () => {
      document.body.style.overflow = "hidden";
    };

    enableScroll = () => {
      document.body.style.overflow = "";
    };
  }

  customElements.define("custom-drawer", CustomDrawer);
</script>
